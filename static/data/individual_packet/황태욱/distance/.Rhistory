plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between Size & Distance [",Size_of_Packets,"of packets]")
res <- lm(packet$rtt~packet$size)
abline(res, col = "red", lwd = 2)
plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between Size & Distance [",Size_of_Packets,"of packets]")
res <- lm(packet$distance~packet$size)
abline(res, col = "red", lwd = 2)
cor(packet$distance, packet$distance, method=c("pearson"))
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
cor(packet$size, packet$distance, method=c("pearson"))
plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between Size & Distance [",Size_of_Packets,"of packets]")
res <- lm(packet$distance~packet$size)
abline(res, col = "red", lwd = 2)
########## First packet table ###############
# packet <- read.csv(file="C:/Users/Jaesung/Desktop/Bigdue/Bigdue/static/data/merge.csv", sep=",")
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
Size_of_Packets = utils:::format.object_size(sum(packet$size), "auto")
Corr_table <- subset(packet, 0<packet$rtt & packet$rtt<0.1)
RTTs<-Corr_table$rtt
Dis<-Corr_table$distance
cor(Dis, RTTs, method=c("pearson"))
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
RTTs<-packet$rtt
Dis<-packet$distance
# Distribution diagram : RTT vs Distance & RTT vs Size
plot(Dis, RTTs*1000,
xlim = c(0,15000),
ylim = c(0,400),
xlab="Distance(Km)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between RTT & Distance [",Size_of_Packets,"of packets]")
# Dis <- Dis[(Dis>=0)&(Dis<=16000)]
# RTTS <- RTTs[(RTTs>=0)&(RTTs<=1)]
res <- lm((RTTs*1000)~Dis)
abline(res, col = "red", lwd = 2)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Data Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between Size & Distance [",Size_of_Packets,"of packets]")
res <- lm(packet$distance~packet$size)
abline(res, col = "red", lwd = 2)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$rtt*1000,
xlim = c(0,2500),
ylim = c(0,400),
xlab="Data Size(Bytes)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5, at = c(0, 100, 200, 300, 400))
plot(packet$size, packet$rtt*1000,
xlim = c(0,2500),
ylim = c(0,400),
xlab="Data Size(Bytes)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5, at = c(0, 100, 200, 300, 400))
# main=paste("Relationship between RTT & Size [",Size_of_Packets,"of packets]")
res <- lm((packet$rtt*1000)~packet$size)
abline(res, col = "red", lwd = 2)
########## First packet table ###############
# packet <- read.csv(file="C:/Users/Jaesung/Desktop/Bigdue/Bigdue/static/data/merge.csv", sep=",")
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
Size_of_Packets = utils:::format.object_size(sum(packet$size), "auto")
Corr_table <- subset(packet, 0<packet$rtt & packet$rtt<0.1)
RTTs<-Corr_table$rtt
Dis<-Corr_table$distance
cor(Dis, RTTs, method=c("pearson"))
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
RTTs<-packet$rtt
Dis<-packet$distance
# Distribution diagram : RTT vs Distance & RTT vs Size
plot(Dis, RTTs*1000,
xlim = c(0,15000),
ylim = c(0,400),
xlab="Distance(Km)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between RTT & Distance [",Size_of_Packets,"of packets]")
# Dis <- Dis[(Dis>=0)&(Dis<=16000)]
# RTTS <- RTTs[(RTTs>=0)&(RTTs<=1)]
res <- lm((RTTs*1000)~Dis)
abline(res, col = "red", lwd = 2)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Data Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between Size & Distance [",Size_of_Packets,"of packets]")
res <- lm(packet$distance~packet$size)
abline(res, col = "red", lwd = 2)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$rtt*1000,
xlim = c(0,2500),
ylim = c(0,400),
xlab="Data Size(Bytes)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5, at = c(0, 100, 200, 300, 400))
# main=paste("Relationship between RTT & Size [",Size_of_Packets,"of packets]")
res <- lm((packet$rtt*1000)~packet$size)
abline(res, col = "red", lwd = 2)
cor((packet$rtt*1000),packet$size)
cor((RTTs*1000),Dis)
cor(packet$distancepacket$size)
cor(packet$distance,packet$size)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
axis(side=1, labels=T, cex.axis = 1.5)
plot(packet$size, packet$rtt*1000,
xlim = c(0,2500),
ylim = c(0,400),
xlab="Data Size(Bytes)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=2, labels=T, cex.axis = 1.5, at = c(0, 100, 200, 300, 400))
# main=paste("Relationship between RTT & Size [",Size_of_Packets,"of packets]")
res <- lm((packet$rtt*1000)~packet$size)
abline(res, col = "red", lwd = 2)
cor((packet$rtt*1000),packet$size)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Data Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
# main=paste("Relationship between Size & Distance [",Size_of_Packets,"of packets]")
res <- lm(packet$distance~packet$size)
abline(res, col = "red", lwd = 2)
cor(packet$distance,packet$size)
########## First packet table ###############
# packet <- read.csv(file="C:/Users/Jaesung/Desktop/Bigdue/Bigdue/static/data/merge.csv", sep=",")
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
Size_of_Packets = utils:::format.object_size(sum(packet$size), "auto")
Corr_table <- subset(packet, 0<packet$rtt & packet$rtt<0.1)
RTTs<-Corr_table$rtt
cor(Dis, RTTs, method=c("pearson"))
Dis<-Corr_table$distance
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
RTTs<-packet$rtt
Dis<-packet$distance
# Distribution diagram : RTT vs Distance & RTT vs Size
plot(Dis, RTTs*1000,
xlim = c(0,15000),
ylim = c(0,400),
xlab="Distance(Km)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$distance>=0)&(packet$distance<15000),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$distance,
xlim = c(0,2500),
ylim = c(0,15000),
xlab="Data Size(Bytes)",
ylab="Distance(Km)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5)
packet <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_size.csv", sep=",")
packet<-packet[(packet$rtt>=0)&(packet$rtt<0.4),]
packet<-packet[(packet$size>=0)&(packet$size<2500),]
plot(packet$size, packet$rtt*1000,
xlim = c(0,2500),
ylim = c(0,400),
xlab="Data Size(Bytes)",
ylab="RTT(ms)", cex.lab = 1.5, axes = F)
axis(side=1, labels=T, cex.axis = 1.5)
axis(side=2, labels=T, cex.axis = 1.5, at = c(0, 100, 200, 300, 400))
# main=paste("Relationship between RTT & Size [",Size_of_Packets,"of packets]")
# main=paste("Relationship between RTT & Size [",Size_of_Packets,"of packets]")
# res <- lm((packet$rtt*1000)~packet$size)
# main=paste("Relationship between RTT & Size [",Size_of_Packets,"of packets]")
# res <- lm((packet$rtt*1000)~packet$size)
# abline(res, col = "red", lwd = 2)
# packet
# packet_local <- read.csv(file="C:/Users/Jaesung/Desktop/Bigdue/Bigdue/static/data/merge.csv", sep=",")
packet_local <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_count.csv", sep=",")
str(packet_local)
# Varibles
Xintercept<-3000
Title_CF="CDF of Distance vs Packet Size [n Packets]\n"
RTTs = packet_local$rtt
Distance = packet_local$distance
# Size = packet_local$size
Count = packet_local$count
packet_local <- packet_local[order(Distance),]
# CF_local <- mutate(packet_local, cum_frequency=cumsum(Size))
CF_local <- mutate(packet_local, cum_frequency=cumsum(Count))
# CF_local <- mutate(CF_local,  percentage=CF_local$cum_frequency / sum(Size))
CF_local <- mutate(CF_local,  percentage=CF_local$cum_frequency / sum(Count))
CF_local <- rbind(c(0,0,0,0,0,0,0,0,0), CF_local)
CF_local # check percentage sum up to 1.0
# Size_of_Packets = utils:::format.object_size(sum(Size), "auto")
Count_of_Packets = utils:::format.object_size(sum(Count), "auto")
Title_CF=paste("CDF of Distance vs Packet Size [", Count_of_Packets, "of Packets]\n")
legend_detail <- c("Foreign User"="#f04546", "Local User"="#3591d1") #red
f2 <- approxfun(CF_local$distance, CF_local$percentage)
Yintercept<-f2(Xintercept)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks=seq(0,5000,10000, 15000, 20000, 25000))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
scale_x_continuous(expand = c(0.01,0), breaks=seq(0,25000,5000)+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks=seq(0,25000,5000))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks=seq(0,25000,5000))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
# packet
# packet_local <- read.csv(file="C:/Users/Jaesung/Desktop/Bigdue/Bigdue/static/data/merge.csv", sep=",")
packet_local <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_count.csv", sep=",")
str(packet_local)
# Varibles
Xintercept<-3000
Title_CF="CDF of Distance vs Packet Size [n Packets]\n"
RTTs = packet_local$rtt
Distance = packet_local$distance
# Size = packet_local$size
Count = packet_local$count
packet_local <- packet_local[order(Distance),]
# CF_local <- mutate(packet_local, cum_frequency=cumsum(Size))
CF_local <- mutate(packet_local, cum_frequency=cumsum(Count))
# CF_local <- mutate(CF_local,  percentage=CF_local$cum_frequency / sum(Size))
CF_local <- mutate(CF_local,  percentage=CF_local$cum_frequency / sum(Count))
CF_local <- rbind(c(0,0,0,0,0,0,0,0,0), CF_local)
CF_local # check percentage sum up to 1.0
# Size_of_Packets = utils:::format.object_size(sum(Size), "auto")
Count_of_Packets = utils:::format.object_size(sum(Count), "auto")
Title_CF=paste("CDF of Distance vs Packet Size [", Count_of_Packets, "of Packets]\n")
legend_detail <- c("Foreign User"="#f04546", "Local User"="#3591d1") #red
f2 <- approxfun(CF_local$distance, CF_local$percentage)
Yintercept<-f2(Xintercept)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks=seq(0,25000,5000))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks=seq(0,25000,5000))+
scale_y_continuous(expand = c(0,0.02))+
lims(x=c(0,40))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), lims(x=c(0,40)))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), lims(x=c(0,40)))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
# packet
# packet_local <- read.csv(file="C:/Users/Jaesung/Desktop/Bigdue/Bigdue/static/data/merge.csv", sep=",")
packet_local <- read.csv(file="C:/Users/Hanul-Park/Desktop/Bigdue/Bigdue/static/data/merge_count.csv", sep=",")
str(packet_local)
Title_CF="CDF of Distance vs Packet Size [n Packets]\n"
RTTs = packet_local$rtt
# Varibles
Xintercept<-3000
Distance = packet_local$distance
# Size = packet_local$size
Count = packet_local$count
packet_local <- packet_local[order(Distance),]
# CF_local <- mutate(packet_local, cum_frequency=cumsum(Size))
CF_local <- mutate(packet_local, cum_frequency=cumsum(Count))
# CF_local <- mutate(CF_local,  percentage=CF_local$cum_frequency / sum(Size))
CF_local <- mutate(CF_local,  percentage=CF_local$cum_frequency / sum(Count))
CF_local # check percentage sum up to 1.0
CF_local <- rbind(c(0,0,0,0,0,0,0,0,0), CF_local)
# Size_of_Packets = utils:::format.object_size(sum(Size), "auto")
Count_of_Packets = utils:::format.object_size(sum(Count), "auto")
Title_CF=paste("CDF of Distance vs Packet Size [", Count_of_Packets, "of Packets]\n")
legend_detail <- c("Foreign User"="#f04546", "Local User"="#3591d1") #red
f2 <- approxfun(CF_local$distance, CF_local$percentage)
Yintercept<-f2(Xintercept)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), lims(x=c(0,40)))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), lims(x=c(0,25000)))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks = c(10,20,30,40,50,60))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks = c(10,20,30,40,50,60))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
graph_CF<-ggplot() +
geom_step(data=CF_local, aes(x=distance, y=percentage))  +
labs(x="Distance(km)", y="CDF")+
scale_color_manual(name="Index\n", values=legend_detail)+
theme(axis.text=element_text(size=14), axis.title.y = element_text(size = rel(1.5), angle = 90),
axis.title.x = element_text(size = rel(1.5), angle = 00))+
#geom_vline(xintercept = Xintercept, linetype="dotted", color = "black", size=1.0)+
#geom_hline(yintercept = Yintercept, linetype="dotted", color = "black", size=1.0)+
geom_segment(mapping=aes(x=3000, xend=3000, y=0, yend=Yintercept), linetype="dotted", size=1.0)+
geom_segment(mapping=aes(x=0, xend=3000, y=Yintercept, yend=Yintercept), linetype="dotted", size=1.0)+
scale_x_continuous(expand = c(0.01,0), breaks = c(0,5000,10000,15000,20000,25000))+
scale_y_continuous(expand = c(0,0.02))+
geom_text(mapping=aes(x=0, y=Yintercept), label=round(Yintercept, 3), hjust=1.4, col="black", size=4)+
geom_text(mapping=aes(x=Xintercept, y=0), label=Xintercept, vjust=2.3, col="black", size=4)
graph_CF_without_clipping <- ggplot_gtable(ggplot_build(graph_CF))
graph_CF_without_clipping$layout$clip[graph_CF_without_clipping$layout$name == "panel"] <- "off"
grid.draw(graph_CF_without_clipping)
